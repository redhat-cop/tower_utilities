---
- name: Check Ansible Tower Running
  uri:
    url: "{{ tower_url }}/api/v2/ping/"
    method: GET
    user: admin
    password: "{{ tower_admin_password }}"
    validate_certs: false
    force_basic_auth: true
  register: tower_install_check
  ignore_errors: true
  failed_when: false
  when: tower_nodes != [] and not tower_force_setup

- name: Check Automation Hub Running
  uri:
    url: "{{ tower_ah_url }}/api/galaxy/"
    method: GET
    user: admin
    password: "{{ tower_admin_password }}"
    validate_certs: false
    force_basic_auth: true
  register: tower_ah_install_check
  ignore_errors: true
  failed_when: false
  when: tower_ah_nodes != [] and not tower_force_setup

- block:
    # Run the Setup
    - name: "[Tower] Run the Ansible Automation Platform Setup Program"
      command: ./setup.sh
      args:
        chdir: "{{ tower_setup_dir }}"
      async: 10000
      poll: 20
      changed_when: false   # these will always run and will always report “changed” otherwise

    - name: Wait for Ansible Tower to be running.
      uri:
        url: "{{ tower_url }}"
        status_code: 200
        validate_certs: false
      register: result
      until: result.status == 200
      retries: 90
      delay: 10
      when: tower_nodes != []

    - name: Wait for Automation Hub to be running.
      uri:
        url: "{{ tower_ah_url }}/ui/"
        status_code: 200
        validate_certs: false
      register: result_ah
      until: result_ah.status == 200
      retries: 90
      delay: 10
      when: tower_ah_nodes != []
  when:
    - tower_force_setup or (tower_nodes != [] and tower_install_check.status != 200) or (tower_ah_nodes != [] and tower_ah_install_check.status != 200)
...
